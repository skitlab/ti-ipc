%%{ 
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
*/
%%}
% var Mod = this.modName;
% if (Mod.match(".")) {
%    Mod = Mod.substring(Mod.lastIndexOf(".") + 1);
% }
/*
 *  ======== `Mod`.xs ========
 */
 
var `Mod` = null;
var List = null;
var DriverTypes = null;
 
/*
 *  ======== module$use ========
 *  xdc.useModules for all other modules needed
 */
function module$use()
{
    `Mod` = this;
    List = xdc.useModule("ti.sdo.utils.List");
    DriverTypes = xdc.useModule("ti.sdo.io.DriverTypes");
    
    `Mod`.numInstances = 1;


    // sample code where numInstances is cpu specific
    /*
    if (Program.cpu.deviceName == "TMS320CDM648")
    {
        `Mod`.numInstances = 2;    
    }
    else
    { 
      if (Program.cpu.deviceName == "TMS320CDM6437")
        {
            `Mod`.numInstances = 1; 
        }
        else
        {
            `Mod`.$logError("Unsupported device" + Program.cpu.deviceName, this);
        }
    }
    */
}


/*
 *  ======== module$static$init ========
 *  static initailization of module state
 */
function module$static$init(mod, params)
{ 
    mod.deviceInUse.length = `Mod`.numInstances;
    
    for (var i = 0; i < `Mod`.numInstances; i++) 
    {   
        mod.deviceInUse[i] = false;
    }
}

/*
 *  ======== instance$static$init ========
 *  static initialization of instance state. Called once per inst.
 */
function instance$static$init(inst, deviceId, params)
{
    inst.deviceId = deviceId;    
    inst.opMode= params.opMode;
    
    for (var j=0; j<`Mod`.NUMCHANS; j++) {
        var chan = inst.chans[j];

        chan.inUse = false;
        chan.pendList = List.create();
        chan.callbackFxn = null;
        chan.callbackArg = null;
    }  
}

/*
 *  ======== viewInitModule ========
 *  ROV function
 */
function viewInitModule(view, mod)
{
    view.deviceInUse.length = mod.deviceInUse.length;   
    for( var i=0; i < mod.deviceInUse.length; i++)
    {  
        view.deviceInUse[i] = mod.deviceInUse[i];
    }
}

/*
 *  ======== viewInitBasic ========
 *  ROV function
 */
function viewInitBasic(view, obj)
{
    view.label = Program.getShortName(obj.$label);
    view.opMode = obj.OpMode;
    view.deviceId = obj.deviceId;
}

function viewInitData(view, obj)
{
    var Program = xdc.useModule('xdc.rov.Program');
    var `Mod` = xdc.useModule('ti.sdo.io.drivers.`Mod`');
    
    /* Fetch the array of log entries. */
    print("Fetching chans at 0x"
        + Number(obj.chans.$addr).toString(16));
        
    try {
        var entries = Program.fetchArray(`Mod`.ChanObj$fetchDesc,
            obj.chans, `Mod`.NUMCHANS);
    }
    catch (e) {
        print("Caught exception while fetching `Mod` chans: "
            + e.toString());
        throw (e);
    }
    
    view.label = "Channel Objects";
    for (var i = 0; i < `Mod`.NUMCHANS; i++) {      
        var chan = new `Mod`.Data_Element_View();
        if (i == 0 ) {
            chan.mode = "INPUT";
        }
        else {
            chan.mode = "OUTPUT";
        }
        chan.inUse = entries[i].inUse;
        chan.callbackFxn = Program.lookupAddr(Number(entries[i].cbFxn));
        chan.callbackArg = "0x" + entries[i].cbArg.toString(16);       
        view.elements.$add(chan);
    }
    
    return (view);
}
%%{
/*
 * @(#) ti.sdo.io.driverTemplate; 0, 00, 00,; 11-7-2012 13:08:18; /db/vtree/library/trees/ipc/ipc-i09/src/ xlibrary

 */

%%}
