/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
/* 
 *  The SysStd System provider is a good one to use for debugging 
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
var SysStd = xdc.useModule('xdc.runtime.SysStd');
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysStd;

/* Modules explicitly used in the application */
var BIOS     = xdc.useModule('ti.sysbios.BIOS');
var Task     = xdc.useModule('ti.sysbios.knl.Task');
var HeapMem  = xdc.useModule('ti.sysbios.heaps.HeapMem');
var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');

/* Server Task  */
var taskParams = new Task.Params();
taskParams.instance.name = "serverTask";
Task.create('&serverTask', taskParams);

/* Client Tasks  */
var taskParams = new Task.Params();
taskParams.instance.name = "clientTask0";
taskParams.arg0 = 0;
Task.create('&clientTask', taskParams);

taskParams.instance.name = "clientTask1";
taskParams.arg0 = 1;
Task.create('&clientTask', taskParams);

taskParams.instance.name = "clientTask2";
taskParams.arg0 = 2;
Task.create('&clientTask', taskParams);

/* Create a heap and register it with MessageQ */
var heapParams = new HeapMem.Params();
taskParams.instance.name = "clientTask0";
heapParams.size = 1024;
var myHeap = HeapMem.create(heapParams);

Program.global.HEAPID = 0;

MessageQ.registerHeapMeta(myHeap, Program.global.HEAPID);
/*
 *  @(#) ti.sdo.ipc.examples.singlecore; 1, 0, 0, 0,; 11-7-2012 13:14:28; /db/vtree/library/trees/ipc/ipc-i09/src/ xlibrary

 */

