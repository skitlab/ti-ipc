/* --COPYRIGHT--,BSD
 * Copyright (c) $(CPYYEAR), Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/

xdc.loadCapsule('bench_common.cfg.xs');

var Idle            = xdc.useModule('ti.sysbios.knl.Idle');
Idle.addFunc('&idleFxn');

var Notify          = xdc.useModule('ti.sdo.ipc.Notify');
//Notify.SetupProxy   = xdc.useModule('ti.sdo.ipc.family.c647x.NotifyCircSetup');
//Notify.SetupProxy   = xdc.useModule('ti.sdo.ipc.family.ti81xx.NotifyCircSetup');

Program.global.NOTIFYSETUP = Notify.SetupProxy.delegate$.$name;

var Ipc             = xdc.useModule('ti.sdo.ipc.Ipc');
var MultiProc       = xdc.useModule('ti.sdo.utils.MultiProc');
/* To avoid wasting shared memory for MessageQ transports */
for (var i = 0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupMessageQ: false,
    });
}

var registerFxn = new Ipc.UserFxn;
registerFxn.attach = '&registerFxn';
Ipc.userFxn = registerFxn;

/* Create a semaphore with count 0 */
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var params = new Semaphore.Params;
params.instance.name = "sem";
Program.global.sem = Semaphore.create(0, params);

/* Tasks that do the notify sending/receiving */
var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.create('&tsk0_func');
